/*
 * simple blog
 *
 * A Simple Blog
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"encoding/binary"
	"errors"
	"net/http"
	"strconv"
	"strings"
	"time"
	"log"

	"github.com/boltdb/bolt"
	"github.com/dgrijalva/jwt-go"
	"github.com/dgrijalva/jwt-go/request"
)

func CreateComment(w http.ResponseWriter, r *http.Request) {
	db, err := bolt.Open("my.db", 0600, nil)
	log.Fatal(err)
	defer db.Close()

	articleId := strings.Split(r.URL.Path, "/")[4]

	Id, err := strconv.Atoi(articleId)
	if err != nil {
		response := InlineResponse404{err.Error()}
		JsonResponse(response, w, http.StatusBadRequest)
		return
	}

	var article Article
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Article"))
		if b != nil {
			v := b.Get(itob(Id))
			if v == nil {
				return errors.New("Article Not Exists")
			} else {
				_=json.Unmarshal(v,&article)
				return nil
			}
		}
		return errors.New("Article Not Exists")
	})

	if err != nil {
		response := InlineResponse404{err.Error()}
		JsonResponse(response, w, http.StatusBadRequest)
		return
	}

	comment := &Comment{
		Date:      time.Now().Format("2019-11-02 13:21:05"),
		Content:   "",
		Author:    "",
		ArticleId: int32(Id),
	}
	err = json.NewDecoder(r.Body).Decode(&comment)

	if err != nil || comment.Content == "" {
		w.WriteHeader(http.StatusBadRequest)
		if err != nil {
			response := InlineResponse404{err.Error()}
			JsonResponse(response, w, http.StatusBadRequest)
		} else {
			response := ErrorResponse{"There is no content in your article"}
			JsonResponse(response, w, http.StatusBadRequest)
		}
		return
	}

	
	token, err := request.ParseFromRequest(r, request.AuthorizationHeaderExtractor,
		func(token *jwt.Token) (interface{}, error) {
			return []byte(comment.Author), nil
		})
	
	if err == nil {
		if token.Valid {

			err = db.Update(func(tx *bolt.Tx) error {
				b, err := tx.CreateBucketIfNotExists([]byte("Comment"))
				if err != nil {
					return err
				}
				id, _ := b.NextSequence()
				encoded, err := json.Marshal(comment)
				return b.Put(itob(int(id)), encoded)
			})
			if err != nil {
				response := InlineResponse404{err.Error()}
				JsonResponse(response, w, http.StatusBadRequest)
				return
			}
			JsonResponse(comment, w, http.StatusOK)
		} else {
			response := ErrorResponse{"Token is not valid"}
			JsonResponse(response, w, http.StatusUnauthorized)
		}
	} else {
		response := ErrorResponse{"Unauthorized access to this resource"}
		JsonResponse(response, w, http.StatusUnauthorized)
	}

}

/////////////////

func GetCommentsOfArticle(w http.ResponseWriter, r *http.Request) {
	db, err := bolt.Open("my.db", 0600, nil)
	fatal(err)
	defer db.Close()

	articleId := strings.Split(r.URL.Path, "/")[4]
	temp, err := strconv.Atoi(articleId)
	var Id int = int(temp)
	if err != nil {
		reponse := InlineResponse404{err.Error()}
		JsonResponse(reponse, w, http.StatusNotFound)
		return
	}
	var article []byte
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Article"))
		if b != nil {
			v := b.Get(itob(Id))
			if v == nil {
				return errors.New("Article Not Exists")
			} else {
				article = v
				return nil
			}
		} else {
			return errors.New("Article Not Exists")
		}
	})

	if err != nil {
		reponse := InlineResponse404{err.Error()}
		JsonResponse(reponse, w, http.StatusNotFound)
		return
	}
	var comments Comments
	var comment Comment
	err = db.View(func(tx *bolt.Tx) error {
		b := tx.Bucket([]byte("Comment"))
		if b != nil {
			c := b.Cursor()

			for k, v := c.First(); k != nil; k, v = c.Next() {
				err = json.Unmarshal(v, &comment)
				if err != nil {
					return err
				}
				if int(comment.ArticleId) == Id {
					comments.Contents = append(comments.Contents, comment)
				}
			}

			return nil
		} else {
			return errors.New("Comment Not Exists")
		}
	})

	if err != nil {
		reponse := InlineResponse404{err.Error()}
		JsonResponse(reponse, w, http.StatusNotFound)
		return
	}

	JsonResponse(comments, w, http.StatusOK)
}
func fatal(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

type Response struct {
	Data string `json:"data"`
}

type Token struct {
	Token string `json:"token"`
}

type ErrorResponse struct {
	Error string `json:"error"`
}

func itob(v int) []byte {
	b := make([]byte, 8)
	binary.BigEndian.PutUint64(b, uint64(v))
	return b
}

func JsonResponse(response interface{}, w http.ResponseWriter, code int) {
	json, err := json.Marshal(response)
	if err != nil {
		log.Fatal(err)
		return
	}

	w.Header().Set("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "X-Requested-With,Content-Type,Authorization")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	w.Write(json)
}
