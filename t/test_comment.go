/*
 * simple blog
 *
 * A Simple Blog
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package t

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strconv"
	"time"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/go"
	//

	sw "github.com/homework/Server/go"

	"github.com/boltdb/bolt"
)

func CreateComment() {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	//create
	err = db.Update(func(tx *bolt.Tx) error {
		a := tx.Bucket([]byte("Article"))
		c := a.Cursor()
		b := tx.Bucket([]byte("Comment"))

		if b == nil {
			b, err = tx.CreateBucket([]byte("Comment"))
			if err != nil {
				log.Fatal(err)
			}
		}
		if b != nil {
			var article sw.Article
			for k, v := c.First(); k != nil; k, v = c.Next() {
				var comment sw.Comment
				err := json.Unmarshal(v, &article)
				if err != nil {
					return err
				}
				fmt.Println(article.Id)
				for i := 1; i < 5; i++ {
					timeStr := time.Now().Format("2006-01-02 15:04:05")
					comment = sw.Comment{timeStr, "comment" + strconv.Itoa(i), "user" + strconv.Itoa(i), article.Id}
					fmt.Println(comment)
					vc, err := json.Marshal(comment)
					err = b.Put([]byte(strconv.Itoa(int(article.Id))+"_"+strconv.Itoa(i)), []byte(vc))
					if err != nil {
						log.Fatal(err)
					}
					time.Sleep(time.Second * 1)
				}
				fmt.Println()
			}
		} else {
			return errors.New("Table Comment doesn't exist")
		}
		return nil
	})

	if err != nil {
		log.Fatal(err)
	}
}

// @Id: Id of Article
func GetComments(Id int) {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	var comment sw.Comment
	var comments sw.Comments
	err = db.View(func(tx *bolt.Tx) error {
		a := tx.Bucket([]byte("Article"))
		c := a.Cursor()
		k, v := c.Seek(itob(Id))
		if k == nil {
			return errors.New("This Article doesn't exist")
		}
		b := tx.Bucket([]byte("Comment"))
		d := b.Cursor()

		if d != nil {
			for k, v = d.First(); k != nil; k, v = d.Next() {
				err := json.Unmarshal(v, &comment)
				if err != nil {
					return err
				}
				if int(comment.ArticleId) == Id {
					comments.Contents = append(comments.Contents, comment)
				}
			}
		} else {
			return errors.New("No Comment")
		}

		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("ArticleId:", Id)
	for i := 0; i < len(comments.Contents); i++ {
		fmt.Println(comments.Contents[i])
	}
}

func DBTestComment() {
	fmt.Println()
	fmt.Println("DBTestComment")
	CreateComment()
	GetComments(1)
}
